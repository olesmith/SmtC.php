#!/usr/bin/python3

from Matrix import *
from Gauss import *
from Polynomial import *

##!
##! Generated transposed Vandermonte matrix and solve linear system.
##! With or without pivotation
##!

def Interpolation_Gauss(xs,ys,pivotation=True):
    #xs: list of abscissas
    #ys: list of ordinates

    V=Matrix_Vandermonte(xs)
    V=Matrix_Transpose(V)
    
    bs=list(ys)
    det=0.0
    if (pivotation):
        Gauss_Pivotation(V,bs)
    else:
        Gauss_Elimination(V,bs)

    return det,bs

##!
##! Print verifying Latex code for polynomia generated by Interpolation_Gauss.
##!

def Interpolation_Latex(xs,ys,pivotation=True):
    #xs: list of abscissas
    #ys: list of ordinates

    V=Matrix_Vandermonte(xs)
    V=Matrix_Transpose(V)
    
    det,bs=Interpolation_Gauss(xs,ys,pivotation)

    norm=Vector_Len(ys)

    vs=Matrix_Mult_Vector(V,bs)
    
    latex=[
        Latex_Title(
            "Direct Interpolation (Gauss Elimination)"
        ),
        Latex_Table(
            [
                ["$x_i$"]+xs,
                ["$y_i$"]+ys
            ]
        ),
        Latex_Math([
            Matrix_Latex(V),
            Vector_Latex(xs),
            "=",
            Vector_Latex(vs),
            "=",
            Vector_Latex(ys),
        ]),
        [
            "Determinant:",str(det)+",",
            "Norm:",str(norm)+".",
        ],
        Latex_Math([
            "P_{"+str(len(xs)-1)+"}=",
            Polynomia_Latex(bs)
        ])
    ]

    table=[]
    table.append([
        "$i$","$x_i$","$y_i$","$P(x_i)$",
        "$\overline{y}_i$",
        "$r_i$",
    ])
    
    for i in range( len(xs) ):
        y=Polynomia_Calc(bs,xs[i])
        table.append([
            i,
            "%.2f" % xs[i],
            "%.2f" % ys[i],
            "%.2f" % y,
            "%.2E" % abs(ys[i]-y),
            "%.2E" % (abs(ys[i]-y)/norm)
        ])

    latex=latex+[
        Latex_Table(table)
    ]

    return Latex_Text(latex)

##!
##! Testing!!
##!

if (__name__=="__main__"):
    xs=[-3.0,-2.0,-1.0, 0.0, 1.0, 2.0, 3.0]
    ys=[-4.0,-1.0,-2.0, 2.0, 3.0, 5.0, 1.0]

    latex=[
        "No pivotation:",
        Interpolation_Latex(xs,ys,False),
        "Partial pivotation:",
        Interpolation_Latex(xs,ys,True),
    ]
    Latex_Print(latex)
    
    Latex_Save("Interpolation.tex",latex)


    
